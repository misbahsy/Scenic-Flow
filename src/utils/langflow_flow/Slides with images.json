{"id":"b8a6c40f-30cb-46d2-896c-45cff852f4b2","data":{"nodes":[{"data":{"description":"Get chat inputs from the Playground.","display_name":"Chat Input","id":"ChatInput-tSHg3","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Get chat inputs from the Playground.","display_name":"Chat Input","documentation":"","edited":false,"field_order":["input_value","store_message","sender","sender_name","session_id","files"],"frozen":false,"icon":"ChatInput","metadata":{},"output_types":[],"outputs":[{"cache":true,"display_name":"Message","method":"message_response","name":"message","selected":"Message","types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_USER, MESSAGE_SENDER_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n"},"files":{"advanced":true,"display_name":"Files","dynamic":false,"fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx","jpg","jpeg","png","bmp","image"],"file_path":"","info":"Files to be sent with the message.","list":true,"name":"files","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"file","value":""},"input_value":{"advanced":false,"display_name":"Text","dynamic":false,"info":"Message to be passed as input.","input_types":["Message"],"list":false,"load_from_db":false,"multiline":true,"name":"input_value","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"the story of rabbit and turtle"},"sender":{"advanced":true,"display_name":"Sender Type","dynamic":false,"info":"Type of sender.","name":"sender","options":["Machine","User"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"User"},"sender_name":{"advanced":true,"display_name":"Sender Name","dynamic":false,"info":"Name of the sender.","input_types":["Message"],"list":false,"load_from_db":false,"name":"sender_name","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"User"},"session_id":{"advanced":true,"display_name":"Session ID","dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","input_types":["Message"],"list":false,"load_from_db":false,"name":"session_id","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"should_store_message":{"_input_type":"BoolInput","advanced":true,"display_name":"Store Messages","dynamic":false,"info":"Store the message in the history.","list":false,"name":"should_store_message","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"bool","value":true}},"lf_version":"1.0.19.post1"},"type":"ChatInput"},"dragging":false,"height":289,"id":"ChatInput-tSHg3","position":{"x":-28.18057163024946,"y":1211.1133259879962},"positionAbsolute":{"x":-28.18057163024946,"y":1211.1133259879962},"selected":false,"type":"genericNode","width":384},{"data":{"description":"Create a prompt template with dynamic variables. If using an OutputParser, you must include {format_instructions} as an additional variable.","display_name":"Prompt","id":"Prompt-n9KAl","node":{"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"},"template":{"advanced":false,"display_name":"Template","dynamic":false,"info":"","list":false,"load_from_db":false,"name":"template","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"type":"prompt","value":"{prompt}\n\n---\nNow your task is to generate a json for the following user given topic\n\nUser: {user_input}\n\nAnswer: here is the json\n"},"user_input":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"user_input","display_name":"user_input","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"prompt":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","name":"prompt","display_name":"prompt","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["prompt","user_input"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true,"required_inputs":null}],"field_order":["template"],"beta":false,"error":null,"edited":false,"metadata":{},"lf_version":"1.0.19.post1"},"type":"Prompt"},"dragging":false,"height":477,"id":"Prompt-n9KAl","position":{"x":577.3727711743836,"y":853.9773971889889},"positionAbsolute":{"x":577.3727711743836,"y":853.9773971889889},"selected":false,"type":"genericNode","width":384},{"data":{"description":"Display a chat message in the Playground.\n\n💡 Click the ▶️ to run the flow.","display_name":"Chat Output","id":"ChatOutput-UsN0Y","node":{"base_classes":["Message"],"beta":false,"conditional_paths":[],"custom_fields":{},"description":"Display a chat message in the Playground.\n\n💡 Click the ▶️ to run the flow.","display_name":"Chat Output","documentation":"","edited":false,"field_order":["input_value","store_message","sender","sender_name","session_id","data_template"],"frozen":false,"icon":"ChatOutput","metadata":{},"output_types":[],"outputs":[{"cache":true,"display_name":"Message","method":"message_response","name":"message","selected":"Message","types":["Message"],"value":"__UNDEFINED__"}],"pinned":false,"template":{"_type":"Component","code":{"advanced":true,"dynamic":true,"fileTypes":[],"file_path":"","info":"","list":false,"load_from_db":false,"multiline":true,"name":"code","password":false,"placeholder":"","required":true,"show":true,"title_case":false,"type":"code","value":"from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n"},"data_template":{"advanced":true,"display_name":"Data Template","dynamic":false,"info":"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.","input_types":["Message"],"list":false,"load_from_db":false,"name":"data_template","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"{text}"},"input_value":{"advanced":false,"display_name":"Text","dynamic":false,"info":"Message to be passed as output.","input_types":["Message"],"list":false,"load_from_db":false,"name":"input_value","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"sender":{"advanced":true,"display_name":"Sender Type","dynamic":false,"info":"Type of sender.","name":"sender","options":["Machine","User"],"placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"str","value":"Machine"},"sender_name":{"advanced":true,"display_name":"Sender Name","dynamic":false,"info":"Name of the sender.","input_types":["Message"],"list":false,"load_from_db":false,"name":"sender_name","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":"AI"},"session_id":{"advanced":true,"display_name":"Session ID","dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","input_types":["Message"],"list":false,"load_from_db":false,"name":"session_id","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_input":true,"trace_as_metadata":true,"type":"str","value":""},"should_store_message":{"_input_type":"BoolInput","advanced":true,"display_name":"Store Messages","dynamic":false,"info":"Store the message in the history.","list":false,"name":"should_store_message","placeholder":"","required":false,"show":true,"title_case":false,"trace_as_metadata":true,"type":"bool","value":true}},"lf_version":"1.0.19.post1"},"type":"ChatOutput"},"dragging":false,"height":329,"id":"ChatOutput-UsN0Y","position":{"x":1760.7152955011902,"y":903.6717604714486},"positionAbsolute":{"x":1760.7152955011902,"y":903.6717604714486},"selected":false,"type":"genericNode","width":384},{"data":{"id":"undefined-UHBbn","node":{"description":"### ✅ Basic Prompting (Hello, World) README\n\nPerform basic prompting with an OpenAI model. *Psst: look out for the* '💡' *emoji for tips in components.*\n\n#### Extra notes on these Components\n- **Chat Input:** Sends natural language instructions to the OpenAI model.\n- **OpenAI Model:** Processes the prompt and generates a response.\n- **Chat Output:** Processes the prompt and generates a response.\n#### Get started\n- Input your **OpenAI API key** to the **OpenAI Model component**\n- Select the **Playground** to interact with the chatbot.\n\nFor more details, see the [flow overview doc](https://docs.langflow.org/starter-projects-basic-prompting).","display_name":"Read Me","documentation":"","template":{"backgroundColor":"indigo"}}},"dragging":false,"height":800,"id":"undefined-UHBbn","position":{"x":-580.3704460174015,"y":498.2202393425737},"positionAbsolute":{"x":-580.3704460174015,"y":498.2202393425737},"resizing":false,"selected":false,"style":{"height":800,"width":532},"type":"noteNode","width":532},{"id":"TextInput-UbNja","type":"genericNode","position":{"x":-30.949801659698323,"y":669.1195633799421},"data":{"type":"TextInput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"Given a topic, generate a JSON array of slides/scenes for a short video. Each slide should contain brief text (no more than 8 words), based on the topic provided. Use the following format and settings for each slide:\n\n- **Animation:** Use any of the AnimationTypes available in the list.\n- **Duration:** Set dynamic durations to keep up with shorter attention spans, ideally around 300-700 ms for fade in/out and 800-1200 ms for staying duration.\n- **Scene Types:** Each scene can be either a \"text\" or \"image\" scene. We are only using \"text\" for now.\n  - **Text Scene** should include:\n    - \"text\": Brief text related to the topic (less than 8 words).\n    - \"font_size\": Use 48.\n    - \"text_color\": Set to \"#FFFFFF\" (white).\n\njson\n[\n  {\n    \"scene_type\": \"text\",\n    \"animation_in\": \"fade-in\",\n    \"animation_out\": \"fade-out\",\n    \"duration_in\": 400,\n    \"stay_duration\": 500,\n    \"duration_out\": 200,\n    \"text\": \"Introduction to the Topic\",\n    \"font_size\": 48,\n    \"text_color\": \"#FFFFFF\",\n    \"background_color\": \"#000000\"\n  },\n  {\n    \"scene_type\": \"text\",\n    \"animation_in\": \"grow-in\",\n    \"animation_out\": \"fade-down\",\n    \"duration_in\": 300,\n    \"stay_duration\": 600,\n    \"duration_out\": 300,\n    \"text\": \"Details of the topics\",\n    \"font_size\": 40,\n    \"text_color\": \"#FFFFFF\",\n    \"background_color\": \"#000000\"\n  }\n]\n\n\n### Additional Details:\n- Each scene should keep a low word count and brief display time for user engagement.\n- Use \"background_color\": \"#000000\" for all scenes.\n- Make sure the JSON includes at least 10 scenes to convey the topic briefly but effectively.\n- Think of explaining the full topic from the beginning to the end using short texts, but do make sure to explain the full topic, not just highlights.\n- After each title slide/scene and a few detailed slides/scenes\n\n---\n\n**Example Input:**  \n**Topic:** \"Benefits of Meditation\"\n\n**Expected Output JSON:**\njson\n[\n  {\n    \"scene_type\": \"text\",\n    \"animation_in\": \"fade-in\",\n    \"animation_out\": \"fade-out\",\n    \"duration_in\": 500,\n    \"stay_duration\": 500,\n    \"duration_out\": 500,\n    \"text\": \"Calms the Mind\",\n    \"font_size\": 48,\n    \"text_color\": \"#FFFFFF\",\n    \"background_color\": \"#000000\"\n  },\n  {\n    \"scene_type\": \"text\",\n    \"animation_in\": \"grow-in\",\n    \"animation_out\": \"fade-down\",\n    \"duration_in\": 800,\n    \"stay_duration\": 400,\n    \"duration_out\": 500,\n    \"text\": \"Give the strength for the day\",\n    \"font_size\": 42,\n    \"text_color\": \"#FFFFFF\",\n    \"background_color\": \"#000000\"\n  },\n  {\n    \"scene_type\": \"text\",\n    \"animation_in\": \"grow-in\",\n    \"animation_out\": \"fade-down\",\n    \"duration_in\": 200,\n    \"stay_duration\": 600,\n    \"duration_out\": 300,\n    \"text\": \"Enhances Focus\",\n    \"font_size\": 48,\n    \"text_color\": \"#FFFFFF\",\n    \"background_color\": \"#000000\"\n  }\n]\n\n\nUse this structure to respond with scenes for the given topic in a similar format. Make sure each scene stays concise and visually cohesive for quick viewing. \n\nthese are all the animation types you could use for in and out:\n\nAnimationType = \n  // Fade Animations\n  | 'fade-in'\n  | 'fade-out'\n  | 'fade-up'\n  | 'fade-down'\n  | 'fade-left'\n  | 'fade-right'\n  // Slide Animations\n  | 'slide-in'\n  | 'slide-out'\n  | 'slide-up'\n  | 'slide-down'\n  | 'slide-left'\n  | 'slide-right'\n  // Scale Animations\n  | 'grow-in'\n  | 'shrink-in'\n  | 'zoom-in'\n  | 'zoom-out'\n  | 'scale-up'\n  | 'scale-down'\n  // Rotate Animations\n  | 'rotate'\n  | 'rotate-left'\n  | 'rotate-right'\n  | 'flip'\n  | 'flip-x'\n  | 'flip-y'\n  // Dynamic Animations\n  | 'bounce'\n  | 'swing'\n  | 'shake'\n  | 'pulse'\n  | 'float'\n  | 'wobble'\n  // Text Animations\n  | 'typewriter'\n  | 'letter-by-letter'\n  | 'word-by-word'\n  | 'glitch';","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Text to be passed as input.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["Message"],"display_name":"Text Input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value"],"beta":false,"edited":false,"metadata":{},"lf_version":"1.0.19.post1"},"id":"TextInput-UbNja"},"selected":false,"width":384,"height":289,"positionAbsolute":{"x":-30.949801659698323,"y":669.1195633799421},"dragging":false},{"id":"GroqModel-W0DFL","type":"genericNode","position":{"x":1144.687761101371,"y":755.4174546695457},"data":{"type":"GroqModel","node":{"template":{"_type":"Component","output_parser":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"output_parser","value":"","display_name":"Output Parser","advanced":true,"input_types":["OutputParser"],"dynamic":false,"info":"The parser to use to parse the output of the model","title_case":false,"type":"other","_input_type":"HandleInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import requests\nfrom langchain_groq import ChatGroq\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass GroqModel(LCModelComponent):\n    display_name: str = \"Groq\"\n    description: str = \"Generate text using Groq.\"\n    icon = \"Groq\"\n    name = \"GroqModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        SecretStrInput(name=\"groq_api_key\", display_name=\"Groq API Key\", info=\"API key for the Groq API.\"),\n        MessageTextInput(\n            name=\"groq_api_base\",\n            display_name=\"Groq API Base\",\n            info=\"Base URL path for API requests, leave blank if not using a proxy or service emulator.\",\n            advanced=True,\n            value=\"https://api.groq.com\",\n        ),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Output Tokens\",\n            info=\"The maximum number of tokens to generate.\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            info=\"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].\",\n            value=0.1,\n        ),\n        IntInput(\n            name=\"n\",\n            display_name=\"N\",\n            info=\"Number of chat completions to generate for each prompt. \"\n            \"Note that the API may not return the full n completions if duplicates are generated.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model\",\n            info=\"The name of the model to use.\",\n            options=[],\n            refresh_button=True,\n        ),\n        HandleInput(\n            name=\"output_parser\",\n            display_name=\"Output Parser\",\n            info=\"The parser to use to parse the output of the model\",\n            advanced=True,\n            input_types=[\"OutputParser\"],\n        ),\n    ]\n\n    def get_models(self) -> list[str]:\n        api_key = self.groq_api_key\n        base_url = self.groq_api_base or \"https://api.groq.com\"\n        url = f\"{base_url}/openai/v1/models\"\n\n        headers = {\"Authorization\": f\"Bearer {api_key}\", \"Content-Type\": \"application/json\"}\n\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            model_list = response.json()\n            return [model[\"id\"] for model in model_list.get(\"data\", [])]\n        except requests.RequestException as e:\n            self.status = f\"Error fetching models: {e}\"\n            return []\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None):\n        if field_name in (\"groq_api_key\", \"groq_api_base\", \"model_name\"):\n            models = self.get_models()\n            build_config[\"model_name\"][\"options\"] = models\n        return build_config\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        groq_api_key = self.groq_api_key\n        model_name = self.model_name\n        max_tokens = self.max_tokens\n        temperature = self.temperature\n        groq_api_base = self.groq_api_base\n        n = self.n\n        stream = self.stream\n\n        return ChatGroq(\n            model=model_name,\n            max_tokens=max_tokens or None,\n            temperature=temperature,\n            base_url=groq_api_base,\n            n=n or 1,\n            api_key=SecretStr(groq_api_key),\n            streaming=stream,\n            response_format={\"type\": \"json_object\"}\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"groq_api_base":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"groq_api_base","value":"https://api.groq.com","display_name":"Groq API Base","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Base URL path for API requests, leave blank if not using a proxy or service emulator.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"groq_api_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"name":"groq_api_key","value":"","display_name":"Groq API Key","advanced":false,"input_types":["Message"],"dynamic":false,"info":"API key for the Groq API.","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"input_value","value":"","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageInput"},"max_tokens":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"max_tokens","value":"","display_name":"Max Output Tokens","advanced":true,"dynamic":false,"info":"The maximum number of tokens to generate.","title_case":false,"type":"int","_input_type":"IntInput"},"model_name":{"trace_as_metadata":true,"options":["llama-3.2-11b-vision-preview","llama-3.2-90b-text-preview","whisper-large-v3","llama3-groq-8b-8192-tool-use-preview","llama-3.1-8b-instant","gemma2-9b-it","llava-v1.5-7b-4096-preview","llama-3.2-1b-preview","llama-guard-3-8b","llama3-70b-8192","llama-3.2-3b-preview","mixtral-8x7b-32768","llama-3.2-90b-vision-preview","llama3-8b-8192","llama3-groq-70b-8192-tool-use-preview","llama-3.2-11b-text-preview","distil-whisper-large-v3-en","whisper-large-v3-turbo","gemma-7b-it","llama-3.1-70b-versatile"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"model_name","value":"mixtral-8x7b-32768","display_name":"Model","advanced":false,"dynamic":false,"info":"The name of the model to use.","refresh_button":true,"title_case":false,"type":"str","_input_type":"DropdownInput"},"n":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"n","value":"","display_name":"N","advanced":true,"dynamic":false,"info":"Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.","title_case":false,"type":"int","_input_type":"IntInput"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"stream","value":false,"display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool","_input_type":"BoolInput"},"system_message":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"system_message","value":"","display_name":"System Message","advanced":true,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"name":"temperature","value":0.1,"display_name":"Temperature","advanced":false,"dynamic":false,"info":"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].","title_case":false,"type":"float","_input_type":"FloatInput"}},"description":"Generate text using Groq.","icon":"Groq","base_classes":["LanguageModel","Message"],"display_name":"Groq","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true,"required_inputs":["input_value","stream","system_message"]},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true,"required_inputs":["groq_api_base","groq_api_key","max_tokens","model_name","n","stream","temperature"]}],"field_order":["input_value","system_message","stream","groq_api_key","groq_api_base","max_tokens","temperature","n","model_name","output_parser"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19.post1"},"id":"GroqModel-W0DFL"},"selected":false,"width":384,"height":603,"positionAbsolute":{"x":1144.687761101371,"y":755.4174546695457},"dragging":false}],"edges":[{"className":"","data":{"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-tSHg3","name":"message","output_types":["Message"]},"targetHandle":{"fieldName":"user_input","id":"Prompt-n9KAl","inputTypes":["Message","Text"],"type":"str"}},"id":"reactflow__edge-ChatInput-tSHg3{œdataTypeœ:œChatInputœ,œidœ:œChatInput-tSHg3œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-n9KAl{œfieldNameœ:œuser_inputœ,œidœ:œPrompt-n9KAlœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","source":"ChatInput-tSHg3","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-tSHg3œ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-n9KAl","targetHandle":"{œfieldNameœ:œuser_inputœ,œidœ:œPrompt-n9KAlœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false},{"source":"TextInput-UbNja","sourceHandle":"{œdataTypeœ:œTextInputœ,œidœ:œTextInput-UbNjaœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-n9KAl","targetHandle":"{œfieldNameœ:œpromptœ,œidœ:œPrompt-n9KAlœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"prompt","id":"Prompt-n9KAl","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"TextInput","id":"TextInput-UbNja","name":"text","output_types":["Message"]}},"id":"reactflow__edge-TextInput-UbNja{œdataTypeœ:œTextInputœ,œidœ:œTextInput-UbNjaœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-n9KAl{œfieldNameœ:œpromptœ,œidœ:œPrompt-n9KAlœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"Prompt-n9KAl","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-n9KAlœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"GroqModel-W0DFL","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-W0DFLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"GroqModel-W0DFL","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-n9KAl","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-n9KAl{œdataTypeœ:œPromptœ,œidœ:œPrompt-n9KAlœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-GroqModel-W0DFL{œfieldNameœ:œinput_valueœ,œidœ:œGroqModel-W0DFLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""},{"source":"GroqModel-W0DFL","sourceHandle":"{œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-W0DFLœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"ChatOutput-UsN0Y","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-UsN0Yœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-UsN0Y","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"GroqModel","id":"GroqModel-W0DFL","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-GroqModel-W0DFL{œdataTypeœ:œGroqModelœ,œidœ:œGroqModel-W0DFLœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-UsN0Y{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-UsN0Yœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","animated":false,"className":""}],"viewport":{"x":150.3385981104559,"y":-142.42632947503722,"zoom":0.4582918907345067}},"description":"This flow creates slides or scenes for the app at https://github.com/misbahsy/txt-to-video","name":"Slides with images","last_tested_version":"1.0.19.post1","endpoint_name":null,"is_component":false}